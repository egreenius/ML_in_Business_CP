# -*- coding: utf-8 -*-
"""step2_MLinBusiness_CP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Azq1bK1fDtI5iw4aAO0xhOy5eSXMelag

# Курсовой проект по курсу "Машинное обучение в бизнесе"
#*Предсказание возврата заемщиком кредита в полном объеме*

## Проверка работоспособности и качества пайплайна

### Загружаем необходимые библиотеки
"""

import numpy as np
import pandas as pd

import dill
import pickle

from sklearn.metrics import f1_score, roc_auc_score, precision_score, classification_report, precision_recall_curve, confusion_matrix

from sklearn.model_selection import cross_val_score, train_test_split

from sklearn.metrics import f1_score, roc_auc_score, precision_score, classification_report, precision_recall_curve, confusion_matrix

## input
# data_path = '/content/drive/MyDrive/Образование/Факультет ИИ/MLinBusiness/CP/loan_data.csv'

## для локальной загрузки
data_path = 'loan_data.csv'

## output
# gb_model_path = '/content/drive/MyDrive/Образование/Факультет ИИ/MLinBusiness/CP/gb_pipeline.dill'
# logreg_model_path = '/content/drive/MyDrive/Образование/Факультет ИИ/MLinBusiness/CP/logreg_pipeline.pkl'
# train_df_path = '/content/drive/MyDrive/Образование/Факультет ИИ/MLinBusiness/CP/train.csv'
# test_df_path = '/content/drive/MyDrive/Образование/Факультет ИИ/MLinBusiness/CP/test.csv'

## для локальной загрузки
gb_model_path = 'gb_pipeline.dill'
logreg_model_path = 'logreg_pipeline.pkl'
train_df_path = 'train.csv'
test_df_path = 'test.csv'
# x_test_df_path = 'x_test.csv'
# y_test_df_path = 'y_test.csv'

"""### Загружаем отложенную выборку"""

# X_test = pd.read_csv(x_test_df_path)
# y_test = pd.read_csv(y_test_df_path)

test_df = pd.read_csv(test_df_path,  index_col=0)
# test_df.head()
#
# test_df.shape

X = test_df.drop(columns='not.fully.paid')
y = test_df['not.fully.paid']
# сформируем отложенную выборку. Для наших целей достаточно 5-10%. Разбиение сделаем стратифицированным по классам
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, shuffle=True, random_state=42, stratify = y)

"""### Загружаем обученный пайплайн"""

with open(gb_model_path, 'rb') as f:
    pipeline = dill.load(f)['model']

"""### Проверяем работу модели"""

preds = pipeline.predict_proba(X_test)[:, 1]

precision, recall, thresholds = precision_recall_curve(y_test, preds)

fscore = (2 * precision * recall) / (precision + recall)
# locate the index of the largest f score
ix = np.argmax(fscore)
print('Best Threshold=%f, F-Score=%.3f, Precision=%.3f, Recall=%.3f' % (thresholds[ix], 
                                                                        fscore[ix],
                                                                        precision[ix],
                                                                        recall[ix]))

tn, fp, fn, tp = confusion_matrix(y_test, preds>thresholds[ix]).ravel()

print(classification_report(y_test, preds>thresholds[ix]))
print(confusion_matrix(y_test,preds>thresholds[ix]))
print()
print(f'TP={tp}\t FP={fp}')
print(f'FN={fn}\t TN={tn}')

print(f"ROC AUC score: {roc_auc_score(y_score=preds, y_true=y_test)}")
